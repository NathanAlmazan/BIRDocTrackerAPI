// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BirOffices {
  officeId        Int         @id @default(autoincrement())
  officeName      String      @db.VarChar(100)
  refNum          String      @db.VarChar(10) @default("RR6")
  sections        OfficeSections[]
}

model OfficeSections {
  sectionId       Int         @id @default(autoincrement())
  sectionName     String      @db.VarChar(100)
  officeId        Int
  positions        String?
  refNum          String?
  office          BirOffices  @relation(fields: [officeId], references: [officeId], onDelete: Cascade)
  employees       UserAccounts[]
  threads         Thread[]
}

model DocumentTypes {
  docId           Int         @id @default(autoincrement())
  docType         String      @db.VarChar(100)
  actionable      Boolean     @default(true)
  threads         Thread[]
}

model DocumentStatus {
  statusId        Int         @id @default(autoincrement())
  statusLabel     String      @db.VarChar(50)
  threads         Thread[]
  purposes        DocumentPurpose[]
  history         ThreadHistory[]
}

model DocumentPurpose {
  purposeId       Int         @id @default(autoincrement())
  purposeName     String      @db.VarChar(50)
  initStatusId    Int?
  initStatus      DocumentStatus?  @relation(fields: [initStatusId], references: [statusId], onDelete: SetNull)
  threads         Thread[]
}

model Roles {
  roleId          Int         @id @default(autoincrement())
  roleName        String      @db.VarChar(100)
  superuser       Boolean     @default(false)
  accounts        UserAccounts[]      
}

model UserAccounts {
  accountId       String      @id @db.Uuid @default(uuid())
  firstName       String      @db.VarChar(50)
  lastName        String      @db.VarChar(50)
  officeId        Int
  password        String
  signImage       String?
  roleId          Int
  resetCode       String?     @db.VarChar(6)
  active          Boolean     @default(true)
  subscription    String?
  section         OfficeSections   @relation(fields: [officeId], references: [sectionId])
  role            Roles            @relation(fields: [roleId], references: [roleId])
  threads         Thread[]
  messages        Messages[]
  reports         Reports[]
}

model ThreadHistory {
  historyId       BigInt     @id  @default(autoincrement())
  historyLabel    String     @db.VarChar(100)
  dateCreated     DateTime   @db.Timestamp(3) @default(now())
  threadId        String     @db.Uuid
  thread          Thread     @relation(fields: [threadId], references: [refId], onDelete: Cascade)
  statusId        Int?
  status          DocumentStatus?  @relation(fields: [statusId], references: [statusId], onDelete: SetNull)
}

model ThreadTags {
  tagId           Int       @id @default(autoincrement())
  tagName         String    @db.VarChar(50)
  threads         Thread[]
}

model Thread {
  refId           String          @id @db.Uuid @default(uuid())    
  refSlipNum      String          @db.VarChar(50)
  subject         String          @db.VarChar(255)
  revision        Int             @default(0)
  authorId        String          @db.Uuid
  reqForm         String?
  broadcast       Boolean         @default(false)
  statusId        Int
  recipientId     Int
  recipientUserId String?         @db.Uuid
  docTypeId       Int
  purposeId       Int
  tagId           Int?
  purposeNotes    String?
  attachments     Boolean         @default(true)
  completed       Boolean         @default(false)
  actionable      Boolean         @default(true)
  active          Boolean         @default(true)
  dateCreated     DateTime        @db.Timestamp(3) @default(now())
  dateUpdated     DateTime        @db.Timestamp(3) @updatedAt
  dateDue         DateTime
  author          UserAccounts    @relation(fields: [authorId], references: [accountId], onDelete: Cascade)
  status          DocumentStatus  @relation(fields: [statusId], references: [statusId])
  recipient       OfficeSections  @relation(fields: [recipientId], references: [sectionId])
  docType         DocumentTypes   @relation(fields: [docTypeId], references: [docId])
  purpose         DocumentPurpose @relation(fields: [purposeId], references: [purposeId])
  threadTag       ThreadTags?     @relation(fields: [tagId], references: [tagId])
  messages        Messages[]
  history         ThreadHistory[]
}

model Messages {
  msgId           BigInt          @id @default(autoincrement())
  refId           String          @db.Uuid
  senderId        String          @db.Uuid
  message         String      
  read            Boolean         @default(false)
  dateSent        DateTime        @db.Timestamp(3) @default(now())
  sender          UserAccounts    @relation(fields: [senderId], references: [accountId], onDelete: Cascade)
  thread          Thread          @relation(fields: [refId], references: [refId])
  files           MessageFiles[]
}

model MessageFiles {
  fileId          BigInt          @id @default(autoincrement())
  msgId           BigInt
  fileUrl         String
  fileName        String          @db.VarChar(150)
  fileType        String          @db.VarChar(20)
  message         Messages        @relation(fields: [msgId], references: [msgId])
}

model Schedules {
  schedId         String          @id @db.Uuid @default(uuid()) 
  subject         String          @db.VarChar(255)  
  description     String  
  type            String          @db.VarChar(20)
  repeat          String          @db.VarChar(20)
  recipientIds    String
  dateStart       DateTime
  dateDue         DateTime
  reports         Reports[]
}

model Reports {
  reportId        BigInt         @id @default(autoincrement())
  reportDate      DateTime
  authorId        String         @db.Uuid
  message         String?
  schedId         String         @db.Uuid
  author          UserAccounts   @relation(fields: [authorId], references: [accountId])
  schedule        Schedules      @relation(fields: [schedId], references: [schedId])
  files           ReportFiles[]
}

model ReportFiles {
  fileId          BigInt          @id @default(autoincrement())
  reportId        BigInt
  fileUrl         String
  fileName        String          @db.VarChar(150)
  fileType        String          @db.VarChar(20)
  report          Reports         @relation(fields: [reportId], references: [reportId])
}